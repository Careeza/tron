* release_history-common-objc.txt
* Release history for the Exit Games Common Objective C Client Library

Copyright (C) 2004-2022 Exit Games GmbH, http://www.photonengine.com

Questions? Write to developer@photonengine.com or visit forum.photonengine.com


*** version 4.1.16.4
	Date: 06-16-2020
	- fixed: a crash which occurred when one the user was passing in an unsupported type and did not set a listener for class EGBase
	- note: despite the fix for the crash it is still highly recommend to set a listener for EGBase as otherwise you might miss out on important log messages like unssupported type errors


*** version 4.1.16.1
	Date: 04-07-2020
	- added: support for iOS Mac Catalyst builds


*** version 4.1.8.0
	Date: 08-01-2017
	- added: bitcode support for iOS, OS X and tvOS


*** version 4.1.6.2
	Date: 06-01-2017
	- fixed a memory leak in the setter of EGMutableArray.MutableData
	- fixed: a memory leak in the setter of EGMutableDictionary.MutableData
	- fixed: a memory leak on receiving of EGDictionary instances
	- fixed: sending of EGDictionary instances did crash and leak on handling EGDictionaries of EGDictionaries


*** version 4.1.5.0
	Date: 12-12-2016
	- fixed: EGDictionary.allKeys did not work correctly when the key type was NSObject and the EGDictionary instance contained at least one entry
	- fixed: EGDictionary::addEntriesFromDictionary() did not work correctly when either the key or the value type of the EGDictionary instance on which that function got called was NSObject and the parameter NSDictionary instance was no EGDictionary and contained keys or values of at least 2 different types
	- added: EGUtils::EGDictionaryFromDictionaryBase()
	- fixed: support for sending and receiving EGDictionary instances with NSObject as key and/or value type



	*** version 4.1.1.0
	Date: 03-16-2016
	- fixed: using Dictionaries with NSObject as their Key- and/or Valuetype could "sometimes" lead into forced disconnects of the client by the server due to serialization errors
	- fixed: added missing support for receiving byte-arrays as elements of object arrays


*** version 4.1.0.0
	Date: 01-26-2016
	- removed: NSObject (EGToString) override fore NSObject::description()
	- added: EGBase override for NSObject::description()
	- note: this is a  less aggressive approach than the one that got introduced with 4.0.5.0, as it only changes the behavior of description() for our EGBase class hierarchy, not for the NSObject hierarchy


*** version 4.0.5.0
	Date: 12-02-2015
	- added: Apple tvOS as new supported platform
	- added: property EGDictionary.allKeys as an override for NSDictionary.allKeys that returns a typesafe EGArray instance instead of a not typesafe NSArray one
	- added: support for NSSecureCoding to EGArray
	- added: support for NSSecureCoding to EGDictionary
	- fixed: memory leaks in EGArray::deepCopy()
	- fixed: memory leaks in EGDictionary::deepCopy()


*** version 4.0.4.0
	Date: 08-13-2015
	- removed: lots of unnecessary const qualifiers on parameters, which types are already immutable classes
	- added: EGArray::arrayWithCoder()
	- added: EGDictionary::initWithCKeyType()
	- added: EGDictionary::initWithCKeyTypes()
	- added: EGDictionary::dictionaryWithCKeyTypes()
	- added: EGDictionary::dictionaryWithCoder()
	- added: new define EG_LOGGING, which determines, if logging will be activated
	- added: new define EG_NOLOGGING, which prevents EG_LOGGING from getting defined automatically; use this to deactivate logging in the app code, if you wish so
	- changed: logging functionality now is not dependent on the EG_DEBUGGER define anymore, but depends on EG_LOGGING, which makes it also available in release builds of the libs
	- fixed: the deserialization of NSArray instance with elements that implement the EGCustomType protocol
	- fixed: the deserialization of EGArray instance with elements that implement the EGCustomType protocol
	- fixed: support in serialization/deserialization for nesting classes into each other that implement the EGCustomType protocol
	- changed: made API C++ agnostic and swift-compatible
	- fixed: support for adding EGArray instances as values to an EGDictionary instance, when the value type of the EGDictionary instance is set to NSObject


*** version 3.2.5.4
	Date: 09-01-2014
	- fixed: added support for deserializing Object arrays with Dictionary elements
	- added: debug output in case of detecting an unsupported type during deserialization
	- changed: greatly improved memory consumption efficiency for big (hundreds of kb or more in size) messages


*** version 3.2.5.0
	Date: 11-06-2013
	- removed: EGBase::debugReturn() (use the EGLOG macro instead, which provides formatted logging, logging levels, etc.)
	- added: EGBase.DebugOutputLevel class property
	- changed: logging now works the same way like in the C++ lib - every PhotonPeer subclass instance has its own EGLogger instance member, while all subclasses of EGBase share one EGLogger instance; every class that has a self.Logger property (can be in a private, protected or internal class extension), can use the EGLOG macro to utilize the Photon client lib logging facilities
	- changed: 1D nByte-arrays unlike all other arrays now have an int size instead of a short size so that its possible to send rather big data like for example a whole file of more than 32kb as byte-array
	- note: photon is not optimized for big amounts of data and a webserver will be the better choice for tasks like filetransfer
	- changed: all constructors and convenience constructors now return the new keyword "instancetype" instead of "id"
	- added: properties EGDictionary.Type and EGDictionary.CType, which return a string representation of the Dictionary, including (nested) key and value types (i.e.: EGDictionary<int, EGDictionary<NSString, NSArray>>)
	- changed: NSObject (CopyDeep)::copyDeep() now returns an immutable instance, even if the original instance has been mutable
	- added: NSObject(CopyDeep)::mutableCopyDeep(), which behaves like deepCopy(), but returns a mutable instance (no matter if the original has been immutable or mutable)
	- note: this change has been made to make the behavior of copyDeep() more consistent with the one of copy()
	- changed: EGArray now honors the subtypes of EGDictionary-instances, so it will no longer see EGDictionary<NSString, float> and EGDictionary<int, short> as the same type, but as different ones
	- fixed: EGMutableArray now overrides the inherited Data property to correctly return immutable access (via a deep copy of the payload) to the data, not mutable access
	- fixed: EGMutableDictionary now overrides the inherited Data property to correctly return immutable access (via a deep copy of the payload) to the data, not mutable access
	- fixed: EGMutableArray.MutableData now returns a mutable deep copy of the payload, not write access to the original payload - the original payload should explicitly be set via the setter of the property, so that the instance can assure type consistency of its payload
	- fixed: EGMutableDictionary.MutableData now returns a mutable deep copy of the payload, not write access to the original payload - the original payload should explicitly be set via the setter of the property, so that the instance can assure type consistency of its payload
	- fixed: EGMutableArray::setArray() has not been working, when the passed EGArray has been empty
	- fixed: EGMutableDictionary::setDictionary() has not been working, when the passed EGDictionary has been empty
	- fixed: EGMutableDictionary::setDictionary() now like EGMutableArray::setArray() allows to set the instance to a Dictionary with different ketypes, valuestypes and / or valuedimensions; this is totally fine, as all old data gets overridden anyway -> this should behave the same like when initializing a brand new dictionary with an existing one
	- fixed: EGArray::mutableCopyWithZone() has not been working (it has allocated a NSMutableArray, when it should allocate an EGMutableArray)
	- fixed: EGDictionary::mutableCopyWithZone() has not been working (it has allocated a NSMutableDictionary, when it should allocate an EGMutableDictionary)
	- fixed: EGMutableArray now correctly overrides copyWithZone() to actually return a copy and not just the retained original
	- fixed: EGMutableDictionary now correctly overrides copyWithZone() to actually return a copy and not just the retained original
	- fixed: Dictionaries and Dictionary arrays in objC are now serialized correctly and not like they would have been ordinary NSDictionaries, anymore
	- fixed: EGDictionary::toString() now prints its entries in the form "key1=value1, key2=value2", like intended and like its also done by NSDictionary, while before it has just printed the values like in "value1, value2" and totally ignored the keys, like if it was an EGArray
	- note: while the key and value types can differ per entry with a NSDictionary, they are consistent for all entries with an EGDictionary; consequently passing true for parameter "withTypes" will not make the instance print the key and value type in front of each key and value, like it is the case for NSDictionary, but only pass the value of "withTypes" to the toString() implementations of its keys and values in case that those have use for it (which the indeed have if they are for example instances of NSDictionary)
	- fixed: support for receiving EGArrays of type EGDictionary
	- fixed: support for receiving empty EGDictionary instances
	- fixed: const correctness of the EGArray API
	- fixed: const correctness of the EGDictionary API
	- fixed: improved the error handling of EGDictionary initialization on illegal parameter data
	- updated: to full Xcode 5 compatibility


*** version 3.2.2.0
	Date: 04-19-2013
	- added: support for float and double as key types


*** version 3.2.0.0
	Date: 02-01-2013
	- changed: removed the whole internal C implementation and replaced it by a new C++ implementation, which is a lot more performant than the old implementation
	- note: instead of Common-c/inc your app now has to include Common-cpp/inc
	- optimized: all dynamic memory allocations now go through a custom memory manager, that is based on several memory pools, instead of direct calls to malloc/new/new[], internally these MemoryPools allocate chunks with increasing amounts of blocks per new nByte[]
	- fixed: serialization of 1D DictionaryArrays
	- fixed: deserialization of 1D DictionaryArrays
	- renamed: class Base into EGBase
	- renamed: protocol BaseListener into EGBaseListener
	- renamed: class CustomType into EGCustomType
	- renamed: class ToString into EGToString
	- added: new first parameter debugLevel to EGBase::debugReturn()
	- added: new first parameter debugLevel to EGBaseListener::debugReturn()


*** version 3.0.4.0
	Date: 10-11-2012
	- removed: class KeyObject
	- changed: KeyObject-instances with NSString payload have been replaced with plain NSString instances, while KeyObject instances with integral payloads have been replaced by NSValue-instances
	- added: classes EGDictionary and EGMutableDictionary as strongtyped versions of NSDictionary
	- fixed: type-checking behavior of EGArray has treated correct types as incorrect in some situations
	- added: CustomTypeUtils::getClassForCode()
	- fixed: CustomTypeUtils::initClass() now expects a Class<CustomType> instead of a protocol-less id as delegate parameter
	- fixed: receiving of EGArrays of CustomTypes
	- changed: simplified the CustomType API (there is no need anymore to provide callbacks for allocation, deallocation and size calculation anymore)
	- changed: NSString::toString()now adds quotation marks at the start and end of its return string, so that that return string is easier to distinguish as a string-instance's string representation, especially for empty strings or strings with only whitespace or not displayable characters
	- fixed: a bug in EGMutableArray, that made it possible to add an object instance to an array of a primitive type
	- added: new classes EGDictionary and EGMutableDictionary, which behave like strong-typed versions of NSDictionary and NSMutableDictionary, resulting in less overhead compared to a NS(Mutable)Dictionary with all keys or all values beeing of the same type
	- added: a first rudimentary API reference doc, auto generated for without manual descriptions for now, but it will be improved over time
	- added: full support for arrays of custom types, including multidimensional arrays and object-arrays with custom elements


*** version 3.0.3.8
	Date: 09-07-2012
	- fixed: a memleak in CustomType serialization
	- fixed: a memleak in NSArray serialization


*** version 3.0.3.4
	Date: 06-01-2012
	- fixed: 3.0.3.0 has introduced a bug, which disabled EGArrays prevention of initialization with an array holding elements of different types, when one all types have been primitive types


*** version 3.0.3.2
	Date: 05-16-2012
	- fixed: a crashbug on iOS / OS X, which has been occurring when receiving strings of certain lengths


*** version 3.0.3.0
	Date: 04-13-2012
	- fixed: a memory leak in deserialization of jagged object arrays
	- removed: Utils::hashToString()
	- moved: class Utils from public to internal interface
	- added: category NSObject (ToString) and suitable implementations for all Cocoa standard containers and all Common objC container classes
	- changed: format of type-output of toString() API
	- fixed: nested EGArray instances can now have different nesting depths on different paths (one now can add for example a NSString and an inner EGArray of NSString to an outer EGArray of NSString)
	- fixed: one now can't add nested EGArrays of different types to the same EGArray anymore


*** version 3.0.2.0
	Date: 03-15-2012
	- renamed: EGTime::Less() into less()
	- renamed: EGTime::Greater() into greater()
	- renamed: EGTime::LessOrEqual() into lessOrEqual()
	- renamed: EGTime::GreaterOrEqual() into greaterOrEqual()
	- renamed: EGTime::Difference() into difference()


*** version 3.0.0.0
	Date: 02-09-2012
	- added: class KeyObject now implements the NSCoding protocol, so that our NSObject (CopyDeep)-extension can be used for NSDictionaries with KeyObject-instances as keys
	- added: support for NSNull-instances to protocol (treated as EG_NULL and represented as NULL after conversion to C)


*** version 3.0.0.0.RC4
	Date: 01-30-2012
	- fixed: iOS ARMv6 support


*** version 3.0.0.0.RC1
	Date: 12-09-2011
	- added: class extension NSObject (CopyDeep), consisting of the function NSObject::copyDeep(), which returns a deepCopy of the instance, on which is is called on, as long as this instance confirms to the NSCoding protocol
	- added: EGArray::arrayWithCapacityAndCType() as alternative for EGArray::arrayWithCapacityAndType() with a char* as second parameter instead of a NSString*
	- added: EGArray::initWithCapacityAndCType() as alternative for EGArray::initWithCapacityAndType() with a char* as second parameter instead of a NSString*


*** version 3.0.0.0.Beta
	Date: 11-04-2011
	- fixed: a potential buffer overflow in Utils::hashToString()
	- finished: custom type-support is now stable
	- fixed: memory leaks in deserialization of custom types


*** version 3.0.0.0.PublicAlpha
	Date: 10-21-2011
	- added: support for custom types as a preview, still WIP (unstable!):
		- added: class CustomTypeFactory
		- added: class CustomType


*** version 3.0.0.0.Alpha
	Date: 09-16-2011
	- changed: versioning - first two numbers of client versions from now on match the first two numbers of Photon server version
	- added: support for sending null-pointers as NSDictionary values
	- fixed: EGArray will now correctly determine and set the type for an instance, which is initialized by passing multiple objects of different subclasses of the same base class, same way behavior for EGMutableArray::set() has been fixed
	- changed: EGArray now checks elements, which are are instances of Foundation class clusters, for being of the same semantic type, not for being of the same syntactic type, like before (for example, it is now allowed, to put a NSString into an EGArray, which has been initialized with an element of type NSMutableString, but you can still force the Array, to only accept instances of a specific subclass (including subclasses of this subclass) of a cluster, by initializing the array with a type instead of one or multiple elements)
	- fixed: EGArray showed some weird, unexpected and unintended behavior for class clusters due to their implementation details (for example it would not accept more than one element in an array, when the first element has been a NSString literal)


*** version 6.5.4
	Date: 06-27-2011
	- osx-only:
		- fixed: compatibility with osx has been broken with 6.5.0


*** version 6.5.2
	Date: 05-26-2011
	- fixed: a memory-leak, occuring, when using arrays, which has been introduced with version 6.5.0


*** version 6.5.0
	Date: 04-29-2011
	- added: support for arrays of class NSDictionary
	- added: full support for multidimensional arrays of all types, which are supported as single-dimensional-arrays (meaning all datatypes supported by protocol for Photon)
	- fixed: NSString::mallocedUTF32String() was allocating more memory than actually needed in 6.4.1
	- added: function UTF8String() to class category NSString (UTF32)
	- changed: rewrote getter/setter API of class KeyObject to make use of properties for a nicer API
	- changed: we do not hardcheck classtype of strings, arrays and dictionaries anymore to be instances of the classes, returned by initializers of classes NSString, NSArray and NSMutableDictionary, but will accept instances of NSString, EGArray, NSDictionary and ANY OF THEIR SUBCLASSES, this should make for a better objc API
	- replaced: usage of NSArray in the API with usage of EGArray/EGMutableArray
	- added: class EGArray as a typed subclass of NSArray and EGMutableArray as its mutable subclass, typed means, they guarantee, that all their elements are of the same type, which can be read out from their .Type property
	- added: support for empty arrays (no elements, but a specified element-type)


*** version 6.4.2
	Date: 03-24-2011
	- changed: iOS binaries are now build as armv6/armv7 universal binaries instead of armv6 only, as Xcode 4 does not allow to link armv6 static libraries into armv7 application builds anymore, as Xccode 3 does. Please be aware of, that an issue in Xcode libtools prevents you from using "load_all" linker setting, when linking to universal static libraries, which have other universal static libraries included. Please use "force_load" instead to work around the categories in static libraries bug from Xcode 3.


*** version 6.4.1
	Date: 01-25-2011
	- fixed: crashbug-fix for iPhone/Mac in recently added unicode support
	- note: from now on you have to use linker flag "force_load" on Common-objC in XCode-versions prior to 4.0. This is due to a bug in class-extensiopn-support for static libraries in Xoce 3.x and is fixed in Xcode 4.0
	- added: class category NSString (UTF32) consisting of the functions stringWithUTF32String(), initWithUTF32String() and mallocedUTF32String() as helperfunctions for conversions between EG_CHAR* (which is defined as wchar_t*) and NSString*


*** version 6.4.0
	Date: 01-19-2011
	- added: macros DEBUG_ONLY(arg), RELEASE_ONLY(arg) and DEBUG_RELEASE(arg1, arg2) to execute code depending on the configuration
	- added: support for unicode-strings


*** version 6.1.0
	Date: 10-15-2010
	- fixed: DBGPRINTF()-macros now also can be used out of the box for C and objC projects, not only for C++ and objC++ projects like before
	- fixed: reason for warning "'0' flag used with '%s' printf format", when using DBGPRINTF-macros in version 6.0
	- changed: nByte is now defined as unsigned char, not as char anymore, so it is the same like type byte in .NET-clients and on Photon server now
	- changed: all occurences of boolean (which has been defined as unsigned char) have been replaced by C++ standard type bool, to make the API more standard, over the network still only one byte is send per bool, although a bool has a size of 4 bytes


*** version 6.0.0.RC3
	Date: 07-06-2010
	- updated: to archive full iPhone SDK 4.0 compatibility (but still also compatible to 3.x and of course to mac os)
	- fixed: NeutronUtils::hashToString() now does not crash on NULL_pointer entries in the hash anymore, but adds an "ERROR: unsupported type" to the string instead of the entry


*** version 6.0.0.RC1
	Date: 04-21-2010
	- split: Neutron and Photon Clients into seperate SDKs, to get rid of confusion with mixed API
	- added: DBGPRINTF-macros are not longer internal, but public API now and can be used for debugging purposes in parts of your appliation not diretly related to our libraries, too
	- added: new parameter "withType" to Utils::hashToString(), default value is FALSE (old behaviour)
	- fixed: When putting multiple KeyObjects of types short or int64 into a NSMutableDictionary, not all entries were added to the dictionary, but occasionally some were not added, due to a bug in KeyObjects implementation of NSObject::isEqual()
	- fixed: Utils::hashToString() to not crash on empty Dictionaries anymore


*** version 5.8.0
	Date: 11-26-2009
	- fixed: critical iPhone photon only memory leak on sending/receiving data 
	- fixed: handeling of boolean and int64 values
	- added: property "(readonly) short PeerID" to class NPeer
	- added: property "(readonly) int IncomingReliableCommandsCount" to class NPeer
	- added: NeutronUtils::hashToString() for printing out the content of a NSMutableDictionary filled with Neutron/Photon datatypes
	- fixed: Neutron and photon API functions NeutronGame::getASID(), NeutronSession::serializeData(), NeutronSession::deserializeData(), NeutronSession::gameGetActive() now only use objC types instead of C ones as parameters and return types
	- removed: property NPeer.TimeAllowanceInt
	- fixed: NeutronSession::serializeData() is now working fine like the internal serialization
	- fixed: NeutronSession::deserializeData() is now working fine like the internal deserialization
	- removed: Photon does not support vectors any longer (Neutron still does)
	- added: Photon (but not Neutron!) now supports the following new data types: EGN_FLOAT, EGN_DOUBLE, EGN_LONGARRAY, EGN_SHORTARRAY, EGN_BOOLEANARRAY, EGN_FLOATARRAY, EGN_DOUBLEARRAY
	- increased overall performance of Photon communication
	- added: Photon now supports Properties (NPeer::opSetPropertiesForActor, NPeer::opSetPropertiesForGame)
	- added: Photon now supports transmission of huge data blocks by automatic fragmentation to multiple UDP packets
	- added: Photon now supports transmission channels to avoid data congestion 
	-added new default parameter 'channelId' = 0 to opRaiseEvent() and to opCustom()
	- changed: all occurrences of <NeutronListener>*, <NPeerListener>* and <BaseListener>* by id<NeutronListener>, id<NPeerListener> and id<BaseListener> for objectiveC++ compatibility
	- added: property (readonly) id<NPeerListener> NPeer.Listener;
	- fixed: Neutron crashed with a buffer-overflow in NeutronSession::egnRegister, if EGN_DEBUGGER was activated and username and password together were longer than 35 characters. 
	- added: NPeer::serviceBasic()
	- removed deprecated callback NeutronListener::forceGameSkilledReturn()
	- improved: NeutronGame and NeutronSession getter/setter functions are properties instead now, like in NPeer
	- added: property "(readwrite) NPEER_DebugLevel DebugOutputLevel" to class NPeer
		To make the debug output sent to NeutronListener::DebugReturn more readable, the messages are now devided into different levels of importance.  


*** version 5.7.1
	Date: 03-26-2009
	- added: overloads to simulate default arguments for all functions having default arguments in neutron/photon C++
	- fixed: Neutron clean up
	- moved/renamed: NeutronGame::shutDownSession() to NeutronSession::shutDown()


*** version 5.7.0
	Date: 02-25-2009
	- changed NPeerListener::nPeerEventAction(): To avoid collisions with Neutron's built-in keys, Neutron will now wrap the user data within another NSMutableDictionary, that is stored in the event hashtable at key EV_RT_KEY_DATA.


*** version 5.6.0
	Date: 02-18-2009
	- added: + KeyObject::withStringValue()
	- added: + KeyObject::withIntValue()
	- added: + KeyObject::withLongValue()
	- added: + KeyObject::withByteValue()
	- added: + KeyObject::withShortValue()
	- added: parameter encrypt to NeutronGame::raiseEvent()
	- fixed: changed parameter evCode of NeutronListener::eventAction() from int to nByte
	- added: parameter encrypt to NeutronSession::login()
	- added: parameter encrypt to NeutronSession::egnRegister()
	- added: parameter encrypt to NeutronSession::forceRegister()
	- added: parameter encrypt to NeutronSession::autoLogin()
	- added: parameter encrypt to NeutronSession::anonymousLogin()
	- added: parameter encrypt to NeutronSession::raiseEventInChannel()
	- added: parameter encrypt to NeutronSession::customOperation()
	- added: parameter encrypt to NeutronSession::raiseEventForActor()
	- removed: NeutronSession::getSecureConnection()
	- removed: NeutronSession::setSecureConnection()
	- added: property (readonly) int ServerTimeOffset
	- added: property (readonly) int BytesOut
	- added: property (readonly) int BytesIn
	- added: property (readonly) PeerState Peerstate
	- added: property (readwrite) int TimeAllowanceInt
	- added: property (readwrite) int SentCountAllowance
	- added: property (readwrite) int TimePingInterval
	- added: property (readonly) int RoundTripTime
	- added: property (readonly) int RoundTripTimeVariance
	- fixed: changed parameter opCode of NPeerListener::eventAction() from int to nByte
	- fixed: changed parameter opCode of NPeerListener::nPeerReturn() from int to nByte


*** version 5.5.1
	Date: 01-15-2009
	- fixed: removed faulty and error-prone void pointers to the user's application in NPeerListener::PeerReturn() and NPeerListener::EventAction


*** version 5.5.0
	Date: 01-08-2009
	- added: NeutronGame::getMinPlayers()
	- added: NeutronGame::getMaxPlayers()
	- added: NeutronGame::getPlayerLocalActorNr()
	- added: NeutronGame::getNumPlayerNames()
	- added: NeutronGame::getPlayersSkill()
	- added: NeutronGame::getName()
	- added: NeutronGame::getActorSessionId()
	- added: NeutronGame::getDateTimeCreated()
	- added: NeutronGame::getModeratorActorNr()
	- added: NeutronSession::getPassword()
	- added: NeutronSession::getScoreTableId()
	- added: NeutronSession::getUserCulture()
	- added: NeutronSession::getAppKey()
	- added: NeutronSession::getConnectionString()
	- added: NeutronSession::getSecureConnection()
	- added: NeutronSession::setSecureConnection()
	- fixed: NeutronSession::getAutoPolling() (did not do anything before)
	- fixed: NeutronSession::setAutoPolling() (did not do anything before)
	- moved: getAutoPolling() from class NeutronGame to class NeutronSession
	- moved: setAutoPolling() from class NeutronGame to class NeutronSession
	- changed NeutronSession::customOperation(): it's now possible to send custom operations without being logged in.


*** version 5.4.0
	Date: 10-09-2008
	- initial version of the Neutron Objective C Wrapper Library