* release_history-photon-objc.txt
* Release history for the Exit Games Photon Objective C Client Library

Copyright (C) 2004-2022 Exit Games GmbH, http://www.photonengine.com

Questions? Write to developer@photonengine.com or visit forum.photonengine.com
Please do also look into Common release history.


*** version 5.0.0.3
	Date: 09-30-2021
	- fixed: version 5.0.0.0 introduced a crash on creating an EGPhotonPeer instance


*** version 4.1.8.0
	Date: 08-01-2017
	- added: bitcode support for iOS, OS X and tvOS


*** version 4.1.6.0
	Date: 01-25-2017
	- fixed: for UDP connections EGPhotonListener::onStatusChanged(EGStatusCode_DISCONNECT) did not get called in case of some connection errors, even when they appeared while the peer was fully connected, while it did get called for others - it now always gets called, when a connection error appears on a connected peer (but it is intentionally not getting called, when the connectionError already happens during the attempt to establish a connection: only connected peers can change their state from being connected to being disconnected)


*** version 4.1.5.0
	Date: 12-12-2016
	- changed: renamed EGPhotonPeer.CrcEnabled into CRCEnabled
	- changed: renamed EGPhotonPeer.PacketLossByCrc into PacketLossByCRC
	- removed: EGTrafficStatsGameLevel.LongestMessageCallback
	- removed: EGTrafficStatsGameLevel.LongestRawMessageCallback
	- changed: EGEventData.Parameters now returns an EGDictionary instead of a NSDictionary
	- changed: EGOperationResponse.Parameters now returns an EGDictionary instead of a NSDictionary


*** version 4.1.3.2
	Date: 07-27-2016
	- fixed: setting EGPhotonPeer.CRCEnabled to true prevented messages above about 1kb to be sent properly when using UDP


*** version 4.1.3.0
	Date: 05-24-2016
	- added: EGPhotonPeer::pingServer()
	- added: EGPhotonListener::onPingResponse()
	- removed: EGEventCode_DISCONNECT, which was never actually in use
	- added: EGConnectionProtocol_DEFAULT


*** version 4.1.1.0
	Date: 03-24-2016
	- changed: the type of the appID parameter in PhotonPeer::connect() from const nByte[] to NSString*


*** version 4.1.0.4
	Date: 03-02-2016
	- fixed: 4.0.5.0 introduced a bug that could lead into a connection error on iOS when the client switches servers


*** version 4.1.0.1
	Date: 01-29-2016
	- fixed: the IPv6 flag in the initBytes now gets unset when the client switches from an IPv6 to an IPv4 connection


*** version 4.1.0.0
	Date: 01-26-2016
	- changed: the client now explicitly tells the server on connect, if it is connected through IPv4 or through IPv6
	- note: this is important when the client is behind a NAT64+DNS64 IPv6 to IPv4 bridging setup as with this change even in that scenario the server still knows that from the client perspective the client is connected through IPv6, although from the server perspective it is an IPv4 connection, which is critical for the name- and masterservers ability to send master- and gameserver addresses to the client in the correct IP-address format


*** version 4.0.5.0
	Date: 09-21-2015
	- added: IPv6 support


*** version 4.0.4.1
	Date: 08-25-2015
	- fixed: the feature to automatically attempt to re-establish the connection under the hood that was introduced in 4.0.4.0, is now only in effect with UDP, as it can't work with TCP and caused problems with TCP for intentional disconnects by server
	- fixed: sending multiple big (at least several kb per message) messages out at once (with the same call to EGPhotonPeer::sendOutgoingCommands() or EGPhotonPeer::service()) could lead to message loss when using TCP


*** version 4.0.4.0
	Date: 08-07-2015
	- changed: EGPhotonPeer::sendOutgoingCommands() now returns a bool, indicating if more commands are waiting to go out
	- added: EGPhotonPeer::sendAcksOnly()
	- added: EGPhotonPeer.ByteCountCurrentDispatch
	- added: EGPhotonPeer.ByteCountLastOperation
	- added: EGPhotonPeer.TimestampOfLastSocketReceive
	- added: EGPhotonPeer.ResentReliableCommands
	- added: EGPhotonPeer.LimitOfUnreliableCommands
	- added: EGPhotonPeer.CrcEnabled
	- added: EGPhotonPeer.PacketLossByCrc
	- added: EGPhotonPeer.TrafficStatsEnabled
	- added: EGPhotonPeer.TrafficStatsElapsedMs
	- added: EGPhotonPeer.TrafficStatsIncoming
	- added: EGPhotonPeer.TrafficStatsOutgoing
	- added: EGPhotonPeer.TrafficStatsGameLevel
	- added: EGPhotonPeer::resetTrafficStats()
	- added: EGPhotonPeer::vitalStatsToString()
	- changed: EGPhotonPeer::service() now calls EGPhotonPeer::sendOutgoingCommands() in a loop until there is nothing left to send, instead of just calling it once per PhotonPeer::service() call like before
	- added: EGPhotonPeer::resetTrafficStatsMaximumCounters()
	- changed: the log level of logging out the server address when calling EGPhotonPeer::connect() from ALL to INFO
	- fixed: 3.2.5.4 introduced a bug that prevented the detection of socket errors on sending data
	- fixed: in case of socket receive or send errors because of a disconnected socket, the client now not just throws a send/receive error, but also calls the disconnect callback and no longer sees itself as connected (previously it continued to try sending/receiving and throwing errors, until a timeout disconnect happened)
	- fixed: if the socket gets disconnected, Photon now tries to automatically re-establish the connection under the hood instead of immediately throwing a connection error; this is more convenient in scenarios like when an iOS device goes to sleep and immediately awakens again, as in that case iOS will immediately kill the connection, but the connection will be back up when the device awakens, so no need to throw an error, if we can successfully reconnect under the hood
	- fixed: connection error handling was not working properly when trying to reconnect to a hostname, that was still cached locally, without having a valid internet connection
	- changed: EGOperationRequest::initWithOperationCode() now takes an EGDictionary* instead of a NSDictionary*
	- changed: EGOperationRequest::operationRequestWithOperationCode() now takes an EGDictionary* instead of a NSDictionary*
	- changed: EGOperationRequest::allKeys() now returns an EGDictionary* instead of a NSDictionary*
	- changed: EGOperationRequest::allValues() now returns an EGDictionary* instead of a NSDictionary*
	- changed: the type of EGPhotonPeer.Listener isn't id<EGBaseListener> anymore, but id<EGPhotonListener>
	- changed: EGPhotonPeer::initWithListener now takes a value of the new ConnectionProtocol enumeration as parameter instead of the old bool parameter "useTCP"
	- added: class EGTrafficStats
	- added: class EGTrafficStatsGameLevel
	- added: EGPhotonPeer.QuickResendAttempts
	- changed: made API C++ agnostic and swift-compatible


*** version 3.2.5.5
	Date: 09-19-2014
	- fixed: in high traffic situations when using tcp messages payloads and also messages sizes coudl get corrupt, leading into huge memory allocation


*** version 3.2.5.4
	Date: 09-01-2014
	- fixed: when using TCP, a message may got corrupted when the size of the previous message has been sligthly less than 4kb
	- fixed: TCP now correctly handles the case that the socket sends only parts of the passed buffer, which gets likely for really big (hundreds of kb) buffers 


*** version 3.2.5.0
	Date: 09-27-2013
	- renamed: EGPhotonPeer.SentTimeAllowance into DisconnectTimeout
	- changed: the disconnect timeout settings now are also in force with tcp not only with udp like it has been before
	- fixed: dynamic hostname resolution now gets done in a separate thread, because gethostbyname() is blocking and in some rare situations with bad network conditions it could block its thread for quite a while
	- fixed: in some situations a permanent error from the underlying socket connection has been treated as a temporary error, so that only a send error and no connection error has been thrown
	- fixed: in cases of connection errors that triggered a disconnect and connection cleanup, the connection error callback has been called before setting the state to disconnecting so that it wasn't clear inside the callback that it doesn't have to call disconnect() anymore, which led to harmless but redundant unneeded disconnect() calls
	- fixed: the names of some internally used symbols comflicted with the symbol names of some other 3rd party libs, which could lead into linker errors in some situations
	- fixed: attempts to connect to a valid but not responding address via tcp now trigger a StatusCode::EXCEPTION_ON_CONNECT, while they prior led into trying to connect for all eternity
	- fixed: a security bug in the key-exchange for encryption


*** version 3.2.3.0
	Date: 07-08-2013
	- changed: the signature of EGLitePeer::opRaiseEvent(), which now accepts every type as payload that is supported by Photons serialization, including (multi-dimensional) arrays, custom types and so on
	- changed: EGLitePeer::opRaiseEvent() doesn't provide different overloads for targetActorNumbers and eventCaching + ReceiverGroup anymore, but the first one doesn't rule out the other 2 anymore and vice versa, so if you are using these parameters, please adjust your calls to the changes in the parameter order


*** version 3.2.2.2
	Date: 07-02-2013
	- fixed: calling EGPhotonPeer::disconnect() from within EGPhotonListener::onOperationResponse() resulted in a crash when using tcp since 3.2.0.0


*** version 3.2.0.0
	Date: 02-28-2013
	- changed: removed the whole internal C implementation and replaced it by a new C++ implementation, which is a lot more performant than the old implementation
	- note: instead of Photon-c/inc your now has to include Photon-cpp/inc
	- optimized: all dynamic memory allocations now go through a custom memory manager, that is based on several memory pools, instead of direct calls to malloc/new/new[], internally these MemoryPools allocate chunks with increasing amounts of blocks per new nByte[]
	- removed: class PhotonBaseListener
	- renamed: class LitePeer into EGLitePeer
	- renamed: class OperationRequest into EGOperationRequest
	- renamed: class OperationResponse into EGOperationResponse
	- renamed: protocol PhotonListener into EGPhotonListener
	- renamed: class PhotonPeer into EGPhotonPeer
	- changed: EGLitePeer::opLeave() does no logner expect any parameter for the room to leave, as it has always ignored that parameter anyway and instead left the current room
	- changed: EGPhotonListener now inherits from EGBaseListener instead of PhotonBaseListener
	- renamed: PhotonPeer_sendDebugOutput() into EGLOG (all classes, that want to use EGLOG(), have to have a member instance mLogger of Common C++ class Logger)
	- removed: PhotonPeer_vsendDebugOutput()
	- fixed: when using tcp protocol operations with sizes of more than 32kb have not been working correctly


*** version 3.0.4.4
	Date: 01-23-2013
	- fixed: PhotonPeer.RoundTripTime has not been giving correct values when using tcp


*** version 3.0.4.2
	Date: 01-08-2013
	- fixed: a bug in the code for exchanging keys when establishing encryption that let into encrpytion not working for a small percentage of keys


*** version 3.0.3.6
	Date: 08-30-2012
	- fixed: a memory leak in PhotonPeer::opCustom()


*** version 3.0.3.5
	Date: 08-24-2012
	- fixed: a socket crash bug on iOS, that appeared, when bringing an app to background via power button instead of home button and bringing it back to foreground afterwards


*** version 3.0.3.3
	Date: 05-22-2012
	- fixed: a bug, which let establishing of encryption fail in roughly about 0,4% of the cases


*** version 3.0.3.0
	Date: 04-16-2012
	- fixed: a memory leak in the new tcp-implementation, which has ben introduced with version 3.0.1.0
	- fixed: tcp-support for Marmalade has been broken with the unix-localhost-change from the 3.0.0.0 release
	- fixed: a successful disconnect isn't triggering a conection error right after anymore
	- changed: OperationResponse::ToString() does not print brackets for the debugMessage anymore, when withDebugMessage is true, if there is no debugMsg at all


*** version 3.0.1.3
	Date: 03-20-2012
	- fixed: tcp implementation of serverTime and roundtripTime updating
	- changed: roundtripTime calculation to a model, which is usable independently of the used protocol
	- fixed: PhotonPeer::fetchServerTimestamp() to not try to fetch the servertime, if the peer is not connected, which has got broken with version 3.0.1.0


*** version 3.0.1.0
	Date: 02-29-2012
	- reimplemeted: tcp-support, as there have been a lot of major issues with the old tcp implementation


*** version 3.0.0.0
	Date: 02-03-2012
	- fixed: automatically sending pings has not been working with tcp, which led into unexpected disconnects
	- fixed: PhotonPeer::connect() now expects a const nByte[APP_NAME_LENGTH] as parameter for the appID, not a const nByte* const anymore
	- fixed: connection to localhost via tcp on iOS led into a crash


*** version 3.0.0.0.RC4
	Date: 01-30-2012
	- fixed: iOS ARMv6 support
	- fixed: a memory leak in establishing encryption


*** version 3.0.0.0.RC3
	Date: 01-09-2012
	- renamed: PhotonPeer::Connect() into connect()
	- renamed: PhotonPeer::Disconnect() into disconnect()
	- fixed: parameterless OperationRequests were not working correctly


*** version 3.0.0.0.RC1
	Date: 12-09-2011
	- removed: implementation details from public EventData API
	- removed: implementation details from public OperationResponse API
	- added: class OperationRequest
	- fixed: added a missing NULL-pointer check for first parameter to LitePeer::opGetPropertiesOfActorByStringKeys()
	- fixed: added a missing NULL-pointer check for first parameter to LitePeer::opGetPropertiesOfGameByStringKeys()
	- changed: PhotonPeer::opCustom() now takes the opCode and op parameters wrapped into a const OperationRequest* const
	- added: LitePeer::opRaiseEventCached()
	- fixed: debugoutput was not beeing displayed correctly on Apple platforms
	- fixed: OperationResponse.DebugMessage wasn't set correctly


*** version 3.0.0.0.Beta
	Date: 10-31-2011
	- fixed: tcp-errorhandling


*** version 3.0.0.0.PublicAlpha
	Date: 10-26-2011
	- renamed: LitePeer::init() into initWithPhotonListener()
	- renamed: PhotonPeer::init() into initWithPhotonListener()
	- changed: debugOut, which is passed to PhotonListener::debugReturn(), now includes its debug-level and the file-path, function-name, line-number of the course-line, from which it originally has been called, so you do not longer have to (or should) add this yourself
	- removed: invocationID (not supported in Photon 3 anymore)
	- changed: switched from Photon 2 encryption API to Photon 3 one
		- added: PhotonPeer::establishEncryption()
		- added: SC_ENCRYPTION_ESTABLISHED.
		- added: SC_ENCRYPTION_FAILED_TO_ESTABLISH
		- removed: PhotonPeer::opExchangeKeysForEncryption()
		- removed: PhotonPeer::deriveSharedKey()
		- removed: OPC_RT_EXCHANGEKEYSFORENCRYPTION
	- fixed: tcp-support is stable now
	- added: class OperationResponse
	- added: class EventData
	- changed: renamed PhotonListener:PhotonPeerEventAction() into onEvent() and changed its signature to take an instance of class EventData instead of its former parameters
	- changed: renamed PhotonListener::PhotonPeerOperationResult() into onOperationResponse() and changed its signature to take an instance of class OperationResponse instead of its former parameters
	- changed: renamed PhotonListener::PhotonPeerStatus() into onStatusChanged()
	- changed: renamed PhotonListener::PhotonPeerDebugReturn() into debugReturn()
	- changed: return value of PhotonPeer::getListener() is now const

	
*** version 3.0.0.0.Alpha
	Date: 10-06-2011
	- now using C++ internally, so you have to add -lstdc++ to "other linker flags" in your project settings
	- added tcp-support (not stable yet!)
	- added: new overload of LitePeer::init() with additional parameter useTcp (overload withouth this parameter will treat it as false)
	- added: new overload of PhotonPeer::init() with additional parameter useTcp (overload withouth this parameter will treat it as false)
	- changed: versioning - first two numbers of client versions from now on match the first two numbers of Photon server version
	- changed: increased default channel count from 2 to 20
	- fixed: memory leaks in PhotonPeer::deriveSharedKey()
	- fixed: memory leaks in PhotonPeer::opExchangeKeysForEncryption()
	- changed: increased all warning thresholds for queues from 75 to 100, just to be the same as in the .NET clients
	- renamed: statuscode SC_EXCEPTION_CONNECT into SC_EXCEPTION_ON_CONNECT
	- added: SC_QUEUE_INCOMING_UNRELIABLE_WARNING, which triggers, if the amount of incoming unreliable commands in a single channel reaches the warning size
	- added: SC_QUEUE_INCOMING_RELIABLE_WARNING, which triggers, if the amount of incoming reliable commands in a single channel reaches the warning size
	- removed: SC_QUEUE_INCOMING_WARNING, which has been triggered, if overall amount of incoming commands passed the warning size
	- changed: warnings for queues getting full are not triggered for any element, getting into a queue after the queue reaching warning size, but instead only one time per break of the limit and dropping below it again cycle, so the important info stays, but the logspam goes
	- added: state PS_INITIALIZING_APPLICATION to enum PeerState to reflect the difference between being connected, but not initialized and being fully connected and initialized (PS_CONNECTED)
	- fixed: LitePeer::opGetPropertiesOfActorByStringKeys() and LitePeer::opGetPropertiesOfGameByStringKeys() have not been working correctly for passing NULL als array of keys
	- changed: the order of parameters in LitePeer::opGetPropertiesOfActorByStringKeys() and LitePeer::opGetPropertiesOfActorByByteKeys()
	- fixed: PhotonPeer.ServerAddress does not crash anymore, if accessed before first connect
	- changed: properties PhotonPeer.QueuedIncomingCommands and PhotonPeer.QueuedOutgoingCommands are now of type int instead of unsigned int, only using -1 for errors and no other negative values, so now same behavior as PhotonPeer.IncomingReliableCommandsCount
	- added: property PhtonPeer.PeerCount
	- changed: constants for operation codes, event codes and event keys are now explicitly defined as bytes, to match the types of the according parameters and avoid casts on passing
	- fixed: peerID is now already initialized to -1 on peer-initialization, not the first time on first connect anymore (but still reseted on every connect)
	- fixed: on receiving events, the library does not automatically create a string representation for the payload in debugmode anymore, but only, if this string is actually sent to the debug-callback (which is currently only the case for DEBUG_LEVEL_ALL), to improve performance


*** version 6.5.5
	Date: 07-28-2011
	- changed: ackknowledgements for received reliable command are now already created, when a reliable command is received, not anymore when it's dispatched, this way acknowledgments for receiving will also happen, when PhotonPeer::dispatchIncomingCommands() is not called for a while


*** version 6.5.4
	Date: 06-28-2011
	- osx-only:
		- fixed: compatibility with osx has been broken recently


*** version 6.5.3
	Date: 06-07-2011
	- fixed: a memory-leak in PhotonPeer::opCustom(), which has been introduced with version 6.5.1 (only direct use of opCustom was affected by the leak, other operations using it indirectly, like the ones form LitePeer have already been fine)


*** version 6.5.1
	Date: 05-23-2011
	- fixed: a critical memory-leak in all non-custom operations, which has been introduced with 6.5.0


*** version 6.5.0
	Date: 05-05-2011
	- fixed: in case, the client receives multiple verifys to a connect-request (due to latency-timeouts), this can't break high level connection-initialization anymore
	- fixed: instantly disconnecting from the server after the connection has been established will now work as expected
	- changed: PhotonPeer::derivedSharedKey() now is taking a C-Array instead of an obj-orientated array as parameter, so you can already see in the mehtod declaration, which type the elemnts should have; you can use EGArray-property CArray, to get a carray-represantation of an EG-Array
	- fixed: a recently introduced memory leak, appearing on receiving operation responses in debug version of the library (there was no leak in the release-version)
	- changed: type of parameters numActors and numActorProperties for LitePeer::opGetPropertiesOfActorByStringKeys() from int to short
	- changed: type of parameters numActors and numActorProperties for LitePeer::opGetPropertiesOfActorByByteKeys() from int to short
	- changed: type of parameter numGameProperties for LitePeer::opGetPropertiesOfGameByStringKeys() from int to short
	- changed: type of parameter numGameProperties for LitePeer::opGetPropertiesOfGameByStringKeys() from int to short
	- added: overload for LitePeer::opRaiseEvent() with additional parameters targetActors and numTargetActors
	- changed: The default value for PhotonPeer.RoundTripTime (300ms, used before connecting) is now replaced with the turnaround time of connect. This should lead to more accurate RTT values much sooner
	- changed: PhotonPeer.ServerTimeOffset and PhotonPeer.ServerTime now both return 0 until the server's timestamp is fetched.
	- added: PhotonPeer::fetchServerTimestamp() to send the time fetch command
	- added: internally we use a new command in enet/udp to fetch the timestamp, which minimizes the latency for that roundtrip. It does not affect roundtriptime
	- renamed: PhotonListener::DebugReturn() into PhotonListener::PhotonPeerDebugReturn() to match the name in C++ version
	- renamed: PhotonListener::eventAction() into PhotonListener::PhotonPeerEventAction() to match the name in C++ version
	- replaced: PhotonListener::peerReturn() by PhotonPeerOperationResult() for operation results and by PhotonPeerStatus() for connectionstate-changes and errors


*** version 6.4.2
	Date: 03-24-2011
	- changed: iOS binaries are now build as armv6/armv7 universal binaries instead of armv6 only, as Xcode 4 does not allow to link armv6 static libraries into armv7 application builds anymore, as Xccode 3 does. Please be aware of, that an issue in Xcode libtools prevents you from using "load_all" linker setting, when linking to universal static libraries, which have other universal static libraries included. Please use "force_load" instead to work around the categories in static libraries bug from Xcode 3.


*** version 6.4.0
	Date: 01-19-2011
	- fixed: in case of a SC_SEND_ERROR now the correct callback gets called
	- added: warnings for queues getting huge are now not only sent to DebugReturn, but also to PeerReturn(), so you can check for them at runtime without having to programmatically handle the debugout and you now can handle them, even if debugout isn't activated at all
	- added: support for unicode-strings
	- fixed: some memory leaks, which have been introduced with version 6.0.0.RC1


*** version 6.3.0
	Date: 12-03-2010
	- added: readonly property PhotonPeer.ServerTime (same accurrany as PhotonPeer.ServerTimeOffset)
	- changed: readonly property PhotonPeer.ServerTimeOffset now has a better accurancy
	- added: readonly property PhotonPeer.IsEncryptionAvailable
	- added: PhotonPeer::deriveSharedKey()
	- added: PhotonPeer::opExchangeKeysForEncryption()
	- added: optional boolean flag encrypt to PhotonPeer::opCustom()
	- fixed: LitePeer::opGetProperties() now does not crash anymore, if it is accidentally called on a not connected peer
	- fixed: LitePeer::opSetPropertiesOfActor() now does not crash anymore, if it is accidentally called on a not connected peer
	- fixed: LitePeer::opSetPropertiesOfGame() now does not crash anymore, if it is accidentally called on a not connected peer
	- fixed: LitePeer::opGetPropertiesOfActor() now does not crash anymore, if it is accidentally called on a not connected peer
	- fixed: LitePeer::opGetPropertiesOfGame() now does not crash anymore, if it is accidentally called on a not connected peer
	- fixed: LitePeer::opLeave() now fails and returns an errorcode, if parameter gameId is a NULL-pointer, instead of crashing
	- fixed: you are now able to immediately reconnect from inside of a disconnect-callback, no matter the reason, which has been triggered the callback (the last fix for this issue has not been covering all possible situations)
	- fixed: PhotonPeer::sendOutgoingCommands() now does not crash anymore, if it is accidentally called on a not connected peer


*** version 6.2.0
	Date: 10-19-2010
	- changed: LitePeer::opGetPropertiesOfActor() now takes an array of actorNrs and the arraysize instead of a single actorNr
	- changed: for LitePeer::opGetPropertiesOfActor() parameters actorNrList and/or properties can be NULL now, NULL is interpreted as "all avaiable"
	- changed: for LitePeer::opGetPropertiesOfGame() and LitePeer_opGetPropertiesOfGameByByteKeys() parameter properties can be NULL now, NULL is interpreted as "all avaiable"
	- added: LitePeer::opGetProperties(), to get all properties of the game and of all actors with one single request
	- added: readonly property PhotonPeer.ServerAddress


*** version 6.1.0
	Date: 10-15-2010
	- fixed: passing an appID of more than the allowed 32 characters to PhotonPeer::Connect() doesn't let the lib crash anymore, but the appID is now null-terminated by the lib and the rest of the overlong appId is cut off
	- fixed: you can now already connect the same peer to another url inside its' disconnect callback, without making the library acknowledging the disconect-acknowledgement from the old server on the new one and this way triggering an exception on the server
	- changed: All precompiled demos now connect to localhost! From now on, you need to run Photon before trying any of the demos (as we don't guarantee that udp.exitgames.com is online anyways)
	- renamed: RC_RT_name constants into SC_name constants
	- added: new class LitePeer, inheriting from PhotonPeer
	- moved: opRaiseEvent() from class PhotonPeer to class LitePeer
	- moved: opJoin() from class PhotonPeer to class LitePeer
	- moved: opLeave() from class PhotonPeer to class LitePeer
	- moved: opSetPropertiesOfActor() from class PhotonPeer to class LitePeer
	- moved: opSetPropertiesOfGame() from class PhotonPeer to class LitePeer
	- moved: opGetPropertiesOfActor() from class PhotonPeer to class LitePeer
	- moved: opGetPropertiesOfGame() from class PhotonPeer to class LitePeer
	- added: opJoin()- overload with additional parameters gameProperties, actorProperties and broadcastActorProperties to class PhotonPeer
	- added: readonly property PhotonPeer.QueuedIncomingCommands
	- added: readonly property PhotonPeer.QueuedOutgoingCommands


*** version 6.0.0
	Date: 09-02-2010
	- reworked: Photon documentation
	- fixed: you can now already reconnect from within a PhotonPeerReturn-callback, when it is informing you about a disconnect, and do not have to wait until after the callback returned, anymore


*** version 6.0.0.RC2
	Date: 06-02-2010
	- changed: removed parameter sid from PhotonPeer::opJoin()
	- changed: added new parameter PhotonPeer_DebugLevel debugLevel to PhotonListener::DebugReturn()
	- optimized: if application is not sending for a while, Photon client only sends one ping to server, not a ping for every existing channel anymore
	- fixed: PhotonPeer::service() and PhotonPeer::serviceBasic() now read out data, waiting in the incoming buffer of the udp-socket, until it is empty, not only one time per call anymore, so more data packets coming in then service calls are made per second, does not lead into data reaching the application much too late anymore


*** version 6.0.0.RC1
	Date: 04-21-2010
	- split: Neutron and Photon Clients into seperate SDKs, to get rid of confusion with mixed API
	- renamed: class NPeer into PhotonPeer
	- renamed: protocol NPeerListener into PhotonPeerListener
	- added: new parameter "withType" to NeutronUtils::hashToString(), default value is FALSE (old behaviour)
	- fixed: queues of photon channels are now reseted on disconnect
	- added: readwrite-property PhotonPeer.SentTimeAllowance